---
description: 
globs: firefishportfoliomanager-client/**,*.js,*.tsx,*.ts,*.css,*.html
alwaysApply: false
---
# Cursor Project Rules

These rules were derived from the `frontend-starter-kit` project and serve as a guide for consistent development of frontend projects with similar technology stack using Cursor.

## 1. Language and Framework
*   **Primary language:** TypeScript (`.ts`, `.tsx`).
*   **UI Library:** React (`react`, `react-dom`).
*   **Components:** Use functional components with React Hooks.

## 2. Project Structure
*   **Source code:** `src/`
*   **Components:** `src/components/`
*   **Utilities/Helpers:** `src/utils/`, `src/helpers/`
*   **Constants:** `src/constants/`
*   **Assets:** `src/assets/` (including `src/assets/svg/` for SVG icons and `src/assets/svg/dist/` for generated components)
*   **Public files:** `public/`
*   **Routing:** `src/routes/` (assumption, may vary)
*   **States (Zustand):** `src/store/` or `src/stores/` (assumption)
*   **Types:** `src/types/` or defined with components/modules.
*   **i18n configuration:** Likely in `src/i18n/` or `src/locales/`.

## 3. Styling
*   **Method:** `styled-components` for CSS-in-JS.
*   **UI Kit:** `antd` for ready-made components and layout.
*   **Convention:** Define styled components close to the React components that use them.

## 4. State Management
*   **Tool:** `Zustand`.
*   **Structure:** Create separate "stores" for different parts of the application state.

## 5. Routing
*   **Tool:** `react-router`.
*   **Configuration:** Define routes centrally (e.g., in `src/routes/index.tsx`).

## 6. Formatting (Prettier)
Follow the configuration from `.prettierrc`:
*   `printWidth`: 100
*   `tabWidth`: 2
*   `useTabs`: false
*   `semi`: true
*   `singleQuote`: true
*   `trailingComma`: "es5"
*   `bracketSpacing`: true
*   `arrowParens`: "always"
*   `endOfLine`: "lf"
*   **Import sorting:** Automatically using `@trivago/prettier-plugin-sort-imports` according to the order defined in `.prettierrc`:
    ```
    "importOrder": [
      "^@components/(.*)$",
      "^@helpers/(.*)$",
      "^@utils/(.*)$",
      "^@constants/(.*)$",
      "^@assets/(.*)$",
      "@/",
      "^[./]"
    ],
    "importOrderSeparation": true,
    "importOrderSortSpecifiers": true
    ```

## 7. Linting (ESLint)
Follow the configuration from `eslint.config.js`:
*   **Base:** Recommended rules from `eslint` and `typescript-eslint`.
*   **React:**
    *   `react/react-in-jsx-scope`: `off` (`import React` not required).
    *   Rules for hooks (`eslint-plugin-react-hooks`).
    *   Rules for refresh (`eslint-plugin-react-refresh`).
    *   Warnings for `jsx-key`, `jsx-no-comment-textnodes`, `jsx-no-useless-fragment`.
    *   `jsx-props-no-spreading`: `off`.
    *   `react/jsx-curly-brace-presence`: `warn` (prefer `prop={val}` and `{var}`).
*   **General:**
    *   `padding-line-between-statements`: Empty line before `return`.
    *   `no-console`: `warn` (`console.warn`, `console.error` allowed).
*   **Ignored:** `dist/` directory.

## 8. Build and Development
*   **Tool:** `Vite`.
*   **Running:**
    *   Development: `npm run dev`
    *   Production build: `npm run build`
    *   Build preview: `npm run preview`
*   **SVG:** Generate React components from SVG using `npm run generate-svg` (runs `@svgr/cli`).

## 9. Internationalization (i18n)
*   **Tools:** `i18next`, `react-i18next`.
*   **Implementation:** Use `useTranslation` hook and store translations in JSON files (likely in `src/locales/`).

## 10. Git Hooks
*   **Tool:** `Husky`.
*   **Purpose:** Enforce code quality (linting, formatting) before commit/push (configuration in `.husky/`).

## 11. Dependencies
*   Keep dependencies up to date.
*   Use `npm install` for installation.